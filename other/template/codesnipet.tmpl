{@include file://./layout/header.tmpl }
<h4>jquery 插件 模版</h4>
<pre>
	<code class="javascript">
//闭包限定命名空间
(function ($) {
    $.fn.extend({
        //默认参数
	    var defaluts = {
	        foreground: 'red',
	        background: 'yellow'
	    };
	    /**
	     * 插件名称,(尽量简单的描述需要传入的参数)
	     * @param  {[type]} options [description]
	     * @return {[type]}         [description]
	     */
        "highLight": function (options) {
            //检测用户传进来的参数是否合法
            if (!isValid(options))
                return this;
            var opts = $.extend({}, defaluts, options); //使用jQuery.extend 覆盖插件默认参数
            return this.each(function () {  //这里的this 就是 jQuery对象。这里return 为了支持链式调用
                //遍历所有的要高亮的dom,当调用 highLight()插件的是一个集合的时候。
                var $this = $(this); //获取当前dom 的 jQuery对象，这里的this是当前循环的dom
                //根据参数来设置 dom的样式
                $this.css({
                    backgroundColor: opts.background,
                    color: opts.foreground
                });
                //格式化高亮文本
                var markup = $this.html();
                markup = $.fn.highLight.format(markup);
                $this.html(markup);
            });
        }
    });

    //公共的格式化 方法. 默认是加粗，用户可以通过覆盖该方法达到不同的格式化效果。
    $.fn.highLight.format = function (str) {
        return "<strong>" + str + "</strong>";
    }
    //私有方法，检测参数是否合法
    function isValid(options) {
        return !options || (options && typeof options === "object") ? true : false;
    }
})(window.jQuery);


// 调用方法
//调用者覆盖 插件暴露的共公方法
$.fn.highLight.format = function (txt) {
    return "<em>" + txt + "</em>"
}
$(function () {
    $("p").highLight({ foreground: 'orange', background: '#ccc' }); //调用自定义 高亮插件
});
	</code>
</pre>

<h4>javascript常用函数式类写法1</h4>
<pre>
    <code class="javascript">
//创建对象
function clz(){
    //构造器
}
clz.prototype.abc={
  //属性
}; 
//实例化
var item=new clz();
    </code>
</pre>
<h4>javascript常用json类写法2</h4>
<pre>
    <code class="javascript">
//创建静态式类对象
var abc={
    a:function(){},
    b:function(){},
    c:"abc",
    d:123
}
//无需实例化
abc.a();
abc.b();
abc.c==="abc";
abc.d>100;
    </code>
</pre>

<h4>js 闭包</h4>
<pre>
<code class="javascript">
//闭包是创建独立的作用域,var级变量不对外部变量污染,但继承父级环境中的变量
var a='abc';
(function(){ 
//独立作用域
    a==="abc";
    var b="cba"; 
})(); 
b===undefined;
</code>
</pre>
{@include file://./layout/footer.tmpl }